/*
Deployment script for PARM_Control

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PARM_Control"
:setvar DefaultFilePrefix "PARM_Control"
:setvar DefaultDataPath "C:\Users\nvrmnd\AppData\Local\Microsoft\VisualStudio\SSDT\PARM"
:setvar DefaultLogPath "C:\Users\nvrmnd\AppData\Local\Microsoft\VisualStudio\SSDT\PARM"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [trinity]...';


GO
CREATE LOGIN [trinity]
    WITH PASSWORD = N'eivctwasn3mMmkwrxo|ZuoacmsFT7_&#$!~<qduadh||Zqze', SID = 0x7BE2402C8006ED488AD776E4300963A4, DEFAULT_LANGUAGE = [us_english], CHECK_POLICY = OFF;


GO
PRINT N'Creating [trinity]...';


GO
CREATE USER [trinity] FOR LOGIN [trinity];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'trinity';


GO
PRINT N'Creating [Control]...';


GO
CREATE SCHEMA [Control]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Control].[SourceSystems]...';


GO
CREATE TABLE [Control].[SourceSystems] (
    [SystemID]   INT          IDENTITY (1, 1) NOT NULL,
    [SystemName] VARCHAR (50) NOT NULL,
    [SystemDesc] VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([SystemID] ASC)
);


GO
PRINT N'Creating [Control].[UploadQueue]...';


GO
CREATE TABLE [Control].[UploadQueue] (
    [UploadQueueID] INT           IDENTITY (1, 1) NOT NULL,
    [RunID]         INT           NOT NULL,
    [FileID]        INT           NOT NULL,
    [StatusCode]    INT           NOT NULL,
    [QueueDate]     DATETIME2 (7) NOT NULL,
    [UploadDate]    DATETIME2 (7) NULL,
    PRIMARY KEY CLUSTERED ([UploadQueueID] ASC)
);


GO
PRINT N'Creating [Control].[DownloadQueue]...';


GO
CREATE TABLE [Control].[DownloadQueue] (
    [DownloadQueueID] INT           IDENTITY (1, 1) NOT NULL,
    [RunID]           INT           NOT NULL,
    [FileID]          INT           NOT NULL,
    [StatusCode]      INT           NOT NULL,
    [QueueDate]       DATETIME2 (7) NOT NULL,
    [DownloadDate]    DATETIME2 (7) NULL,
    PRIMARY KEY CLUSTERED ([DownloadQueueID] ASC)
);


GO
PRINT N'Creating [Control].[Files]...';


GO
CREATE TABLE [Control].[Files] (
    [FileID]     INT           IDENTITY (1, 1) NOT NULL,
    [SystemID]   INT           NOT NULL,
    [SourceURI]  VARCHAR (255) NOT NULL,
    [FileName]   VARCHAR (255) NOT NULL,
    [DateOffset] INT           NOT NULL,
    [FileDesc]   VARCHAR (255) NOT NULL,
    [TargetURI]  VARCHAR (255) NOT NULL,
    PRIMARY KEY CLUSTERED ([FileID] ASC)
);


GO
PRINT N'Creating [Control].[Run]...';


GO
CREATE TABLE [Control].[Run] (
    [RunID]        INT  IDENTITY (1, 1) NOT NULL,
    [BusinessDate] DATE NOT NULL,
    PRIMARY KEY CLUSTERED ([RunID] ASC),
    CONSTRAINT [UNQ_BusinessDate] UNIQUE NONCLUSTERED ([BusinessDate] ASC)
);


GO
PRINT N'Creating [Control].[QueueStatusCodes]...';


GO
CREATE TABLE [Control].[QueueStatusCodes] (
    [StatusCode]     INT           IDENTITY (1, 1) NOT NULL,
    [StatusCodeDesc] VARCHAR (255) NOT NULL,
    PRIMARY KEY CLUSTERED ([StatusCode] ASC)
);


GO
PRINT N'Creating [Control].[ProcessLog]...';


GO
CREATE TABLE [Control].[ProcessLog] (
    [Temp] VARCHAR (255) NULL
);


GO
PRINT N'Creating unnamed constraint on [Control].[UploadQueue]...';


GO
ALTER TABLE [Control].[UploadQueue]
    ADD DEFAULT ((0)) FOR [StatusCode];


GO
PRINT N'Creating unnamed constraint on [Control].[UploadQueue]...';


GO
ALTER TABLE [Control].[UploadQueue]
    ADD DEFAULT (getdate()) FOR [QueueDate];


GO
PRINT N'Creating unnamed constraint on [Control].[DownloadQueue]...';


GO
ALTER TABLE [Control].[DownloadQueue]
    ADD DEFAULT ((0)) FOR [StatusCode];


GO
PRINT N'Creating unnamed constraint on [Control].[DownloadQueue]...';


GO
ALTER TABLE [Control].[DownloadQueue]
    ADD DEFAULT (getdate()) FOR [QueueDate];


GO
PRINT N'Creating unnamed constraint on [Control].[UploadQueue]...';


GO
ALTER TABLE [Control].[UploadQueue] WITH NOCHECK
    ADD FOREIGN KEY ([FileID]) REFERENCES [Control].[Files] ([FileID]);


GO
PRINT N'Creating unnamed constraint on [Control].[UploadQueue]...';


GO
ALTER TABLE [Control].[UploadQueue] WITH NOCHECK
    ADD FOREIGN KEY ([RunID]) REFERENCES [Control].[Run] ([RunID]);


GO
PRINT N'Creating unnamed constraint on [Control].[UploadQueue]...';


GO
ALTER TABLE [Control].[UploadQueue] WITH NOCHECK
    ADD FOREIGN KEY ([StatusCode]) REFERENCES [Control].[QueueStatusCodes] ([StatusCode]);


GO
PRINT N'Creating unnamed constraint on [Control].[DownloadQueue]...';


GO
ALTER TABLE [Control].[DownloadQueue] WITH NOCHECK
    ADD FOREIGN KEY ([FileID]) REFERENCES [Control].[Files] ([FileID]);


GO
PRINT N'Creating unnamed constraint on [Control].[DownloadQueue]...';


GO
ALTER TABLE [Control].[DownloadQueue] WITH NOCHECK
    ADD FOREIGN KEY ([RunID]) REFERENCES [Control].[Run] ([RunID]);


GO
PRINT N'Creating unnamed constraint on [Control].[DownloadQueue]...';


GO
ALTER TABLE [Control].[DownloadQueue] WITH NOCHECK
    ADD FOREIGN KEY ([StatusCode]) REFERENCES [Control].[QueueStatusCodes] ([StatusCode]);


GO
PRINT N'Creating unnamed constraint on [Control].[Files]...';


GO
ALTER TABLE [Control].[Files] WITH NOCHECK
    ADD FOREIGN KEY ([SystemID]) REFERENCES [Control].[SourceSystems] ([SystemID]);


GO
PRINT N'Creating [Control].[InitialiseUploadQueue]...';


GO


-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- *********************************************
CREATE PROCEDURE [Control].[InitialiseUploadQueue]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	INSERT INTO [Control].[UploadQueue] (RunID, FileID)
	SELECT 
		RunID,
		1
	FROM [Control].[Run]
	WHERE RunID NOT IN (SELECT RunID FROM [Control].[UploadQueue]);
	
END
GO
PRINT N'Creating [Control].[InitialiseDownloadQueue]...';


GO


-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- *********************************************
CREATE PROCEDURE [Control].[InitialiseDownloadQueue]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	-- SIMPLE HACK FOR NOW
	
	INSERT INTO [Control].[DownloadQueue] (RunID, FileID)
	SELECT 
		RunID,
		1
	FROM [Control].[Run]
	WHERE RunID NOT IN (SELECT RunID FROM [Control].[DownloadQueue]);
	
	
END
GO
PRINT N'Creating [Control].[InitialiseRun]...';


GO


-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- *********************************************
CREATE PROCEDURE [Control].[InitialiseRun]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	DECLARE @EOD_D DATE = (SELECT CASE (DATEPART(dw, MAX(BusinessDate)) + @@DATEFIRST) % 7
										WHEN 1 THEN DATEADD(day,1,MAX(BusinessDate)) --'Sunday'
										WHEN 2 THEN DATEADD(day,1,MAX(BusinessDate)) --'Monday'
										WHEN 3 THEN DATEADD(day,1,MAX(BusinessDate)) --'Tuesday'
										WHEN 4 THEN DATEADD(day,1,MAX(BusinessDate)) --'Wednesday'
										WHEN 5 THEN DATEADD(day,1,MAX(BusinessDate)) --'Thursday'
										WHEN 6 THEN DATEADD(day,3,MAX(BusinessDate)) --'Friday'
										WHEN 0 THEN DATEADD(day,2,MAX(BusinessDate)) --'Saturday'
									END FROM [Control].[Run]);
	DECLARE @DATE_COUNT INT;
	DECLARE @MAX_DATE DATE = GETDATE();

	WHILE @EOD_D < @MAX_DATE
	BEGIN

		SELECT @DATE_COUNT = COUNT(*) FROM [PARM_Control].[Control].[Run] WHERE BusinessDate = @EOD_D;

		IF @DATE_COUNT = 0 -- if date doesnt already exist in table
		BEGIN
			INSERT INTO [PARM_Control].[Control].[Run] (BusinessDate)
			SELECT @EOD_D;
		END

		SELECT @EOD_D = -- get next date
			CASE (DATEPART(dw, @EOD_D) + @@DATEFIRST) % 7
				WHEN 1 THEN DATEADD(day,1,@EOD_D) --'Sunday'
				WHEN 2 THEN DATEADD(day,1,@EOD_D) --'Monday'
				WHEN 3 THEN DATEADD(day,1,@EOD_D) --'Tuesday'
				WHEN 4 THEN DATEADD(day,1,@EOD_D) --'Wednesday'
				WHEN 5 THEN DATEADD(day,1,@EOD_D) --'Thursday'
				WHEN 6 THEN DATEADD(day,3,@EOD_D) --'Friday'
				WHEN 0 THEN DATEADD(day,2,@EOD_D) --'Saturday'
			END
	END

END
GO
PRINT N'Creating [Control].[InitialiseAutomation]...';


GO


-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- *********************************************
CREATE PROCEDURE [Control].[InitialiseAutomation]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	-- Populate run with business date
	EXEC [Control].[InitialiseRun];
	-- Populate Download Queue
	EXEC [Control].[InitialiseDownloadQueue];
	-- Populate Upload Queue
	EXEC [Control].[InitialiseUploadQueue];

END
GO
PRINT N'Creating [Control].[Set_UploadStatus]...';


GO

-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- *********************************************
CREATE PROCEDURE [Control].[Set_UploadStatus]
	@RunID INT,
	@FileID INT,
	@StatusCode INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	UPDATE [Control].[UploadQueue]
	SET StatusCode = @StatusCode,
		UploadDate = GETDATE()
	WHERE RunID = @RunID
	AND FileID = @FileID;

END
GO
PRINT N'Creating [Control].[Get_FileDownloadMetadata]...';


GO
-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Get a file to download from the queue
-- *********************************************
CREATE PROCEDURE [Control].[Get_FileDownloadMetadata]
	@RunID INT = 0 --If not supplied, the min will be found
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @BusinessDate DATE;
	
	IF @RunID = 0 SELECT @RunID = MIN(RunID) FROM [Control].[DownloadQueue] WHERE StatusCode = 0;

	SELECT @BusinessDate = BusinessDate FROM [Control].[Run] WHERE RunID = @RunID;

-- This code isnt generic, will only work for AFR files.
-- Change when addition systems are added
	
	SELECT
		A.FileID,
		REPLACE(B.SourceURI,'[YYYY-MM-DD]',CONVERT(char(10),DATEADD(d,B.DateOffset,@BusinessDate),126)) AS [SourceURI],
		REPLACE(B.FileName,'[YYMMDD]',CONVERT(char(6),DATEADD(d,B.DateOffset,@BusinessDate),12)) AS [FileName],
		B.TargetURI,
		A.RunID
	FROM [Control].[DownloadQueue] AS A
	INNER JOIN [Control].[Files] AS B on A.FileID = B.FileID
	WHERE StatusCode = 0 -- Only files that are pending 
	AND RunID = @RunID;


END
GO
PRINT N'Creating [Control].[Get_FileUploadMetadata]...';


GO
-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 07/04/2015
-- Description:	Get RunID and Filename for a FileID
-- Test: EXEC [Control].[Get_FileUploadMetadata] @FileID = 1;
-- *********************************************

CREATE PROCEDURE [Control].[Get_FileUploadMetadata]
	@FileID INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @BusinessDate DATE, @RunID INT;
	
	SELECT @RunID = MIN(RunID) FROM [Control].[UploadQueue] WHERE StatusCode = 0 AND FileID = @FileID;

	SELECT @BusinessDate = BusinessDate FROM [Control].[Run] WHERE RunID = @RunID;

-- This code isnt generic, will only work for AFR files.
-- Change when addition systems are added
	
	SELECT
		A.RunID,
		B.SystemID,
		B.TargetURI AS [Directory],
		REPLACE(B.FileName,'[YYMMDD]',CONVERT(char(6),DATEADD(d,B.DateOffset,@BusinessDate),12)) AS [Filename]
	FROM [Control].[UploadQueue] AS A
	INNER JOIN [Control].[Files] AS B on A.FileID = B.FileID
	WHERE A.StatusCode = 0 -- Only files that are pending 
	AND A.RunID = @RunID
	AND A.FileID = @FileID;

END
GO
PRINT N'Creating [Control].[Set_DownloadStatus]...';


GO

-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- *********************************************
CREATE PROCEDURE [Control].[Set_DownloadStatus]
	@RunID INT,
	@FileID INT,
	@StatusCode INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	UPDATE [Control].[DownloadQueue]
	SET StatusCode = @StatusCode,
		DownloadDate = GETDATE()
	WHERE RunID = @RunID
	AND FileID = @FileID;

END
GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [trinity];


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'Control.UploadQueue'), OBJECT_ID(N'Control.DownloadQueue'), OBJECT_ID(N'Control.Files'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
