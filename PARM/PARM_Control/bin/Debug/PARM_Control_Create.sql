/*
Deployment script for PARM_Control

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PARM_Control"
:setvar DefaultFilePrefix "PARM_Control"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE Latin1_General_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [trinity]...';


GO
CREATE LOGIN [trinity]
    WITH PASSWORD = N'eivctwasn3mMmkwrxo|ZuoacmsFT7_&#$!~<qduadh||Zqze', SID = 0x7BE2402C8006ED488AD776E4300963A4, DEFAULT_LANGUAGE = [us_english], CHECK_POLICY = OFF;


GO
PRINT N'Creating [trinity]...';


GO
CREATE USER [trinity] FOR LOGIN [trinity];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'trinity';


GO
PRINT N'Creating [Control]...';


GO
CREATE SCHEMA [Control]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Control].[SourceSystems]...';


GO
CREATE TABLE [Control].[SourceSystems] (
    [SystemID]   INT          IDENTITY (1, 1) NOT NULL,
    [SystemName] VARCHAR (50) NOT NULL,
    [SystemDesc] VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([SystemID] ASC)
);


GO
PRINT N'Creating [Control].[UploadQueue]...';


GO
CREATE TABLE [Control].[UploadQueue] (
    [UploadQueueID] INT           IDENTITY (1, 1) NOT NULL,
    [RunID]         INT           NOT NULL,
    [FileID]        INT           NOT NULL,
    [StatusCode]    INT           NOT NULL,
    [QueueDate]     DATETIME2 (7) NOT NULL,
    [UploadDate]    DATETIME2 (7) NULL,
    PRIMARY KEY CLUSTERED ([UploadQueueID] ASC)
);


GO
PRINT N'Creating [Control].[DownloadQueue]...';


GO
CREATE TABLE [Control].[DownloadQueue] (
    [DownloadQueueID] INT           IDENTITY (1, 1) NOT NULL,
    [RunID]           INT           NOT NULL,
    [FileID]          INT           NOT NULL,
    [StatusCode]      INT           NOT NULL,
    [QueueDate]       DATETIME2 (7) NOT NULL,
    [DownloadDate]    DATETIME2 (7) NULL,
    PRIMARY KEY CLUSTERED ([DownloadQueueID] ASC)
);


GO
PRINT N'Creating [Control].[Files]...';


GO
CREATE TABLE [Control].[Files] (
    [FileID]     INT           IDENTITY (1, 1) NOT NULL,
    [SystemID]   INT           NOT NULL,
    [SourceURI]  VARCHAR (255) NOT NULL,
    [FileName]   VARCHAR (255) NOT NULL,
    [DateOffset] INT           NOT NULL,
    [FileDesc]   VARCHAR (255) NOT NULL,
    [TargetURI]  VARCHAR (255) NOT NULL,
    [Frequency]  CHAR (1)      NULL,
    [Disabled]   BIT           NULL,
    PRIMARY KEY CLUSTERED ([FileID] ASC)
);


GO
PRINT N'Creating [Control].[Files].[NCI_UNQ_Files_SystemID_SourceURI_FileName]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [NCI_UNQ_Files_SystemID_SourceURI_FileName]
    ON [Control].[Files]([SystemID] ASC, [SourceURI] ASC, [FileName] ASC);


GO
PRINT N'Creating [Control].[Run]...';


GO
CREATE TABLE [Control].[Run] (
    [RunID]        INT  IDENTITY (1, 1) NOT NULL,
    [BusinessDate] DATE NOT NULL,
    PRIMARY KEY CLUSTERED ([RunID] ASC),
    CONSTRAINT [UNQ_BusinessDate] UNIQUE NONCLUSTERED ([BusinessDate] ASC)
);


GO
PRINT N'Creating [Control].[QueueStatusCodes]...';


GO
CREATE TABLE [Control].[QueueStatusCodes] (
    [StatusCode]     INT           IDENTITY (1, 1) NOT NULL,
    [StatusCodeDesc] VARCHAR (255) NOT NULL,
    PRIMARY KEY CLUSTERED ([StatusCode] ASC)
);


GO
PRINT N'Creating [Control].[ProcessLog]...';


GO
CREATE TABLE [Control].[ProcessLog] (
    [Temp] VARCHAR (255) NULL
);


GO
PRINT N'Creating unnamed constraint on [Control].[UploadQueue]...';


GO
ALTER TABLE [Control].[UploadQueue]
    ADD DEFAULT ((0)) FOR [StatusCode];


GO
PRINT N'Creating unnamed constraint on [Control].[UploadQueue]...';


GO
ALTER TABLE [Control].[UploadQueue]
    ADD DEFAULT (getdate()) FOR [QueueDate];


GO
PRINT N'Creating unnamed constraint on [Control].[DownloadQueue]...';


GO
ALTER TABLE [Control].[DownloadQueue]
    ADD DEFAULT ((0)) FOR [StatusCode];


GO
PRINT N'Creating unnamed constraint on [Control].[DownloadQueue]...';


GO
ALTER TABLE [Control].[DownloadQueue]
    ADD DEFAULT (getdate()) FOR [QueueDate];


GO
PRINT N'Creating unnamed constraint on [Control].[UploadQueue]...';


GO
ALTER TABLE [Control].[UploadQueue]
    ADD FOREIGN KEY ([FileID]) REFERENCES [Control].[Files] ([FileID]);


GO
PRINT N'Creating unnamed constraint on [Control].[UploadQueue]...';


GO
ALTER TABLE [Control].[UploadQueue]
    ADD FOREIGN KEY ([RunID]) REFERENCES [Control].[Run] ([RunID]);


GO
PRINT N'Creating unnamed constraint on [Control].[UploadQueue]...';


GO
ALTER TABLE [Control].[UploadQueue]
    ADD FOREIGN KEY ([StatusCode]) REFERENCES [Control].[QueueStatusCodes] ([StatusCode]);


GO
PRINT N'Creating unnamed constraint on [Control].[DownloadQueue]...';


GO
ALTER TABLE [Control].[DownloadQueue]
    ADD FOREIGN KEY ([FileID]) REFERENCES [Control].[Files] ([FileID]);


GO
PRINT N'Creating unnamed constraint on [Control].[DownloadQueue]...';


GO
ALTER TABLE [Control].[DownloadQueue]
    ADD FOREIGN KEY ([RunID]) REFERENCES [Control].[Run] ([RunID]);


GO
PRINT N'Creating unnamed constraint on [Control].[DownloadQueue]...';


GO
ALTER TABLE [Control].[DownloadQueue]
    ADD FOREIGN KEY ([StatusCode]) REFERENCES [Control].[QueueStatusCodes] ([StatusCode]);


GO
PRINT N'Creating unnamed constraint on [Control].[Files]...';


GO
ALTER TABLE [Control].[Files]
    ADD FOREIGN KEY ([SystemID]) REFERENCES [Control].[SourceSystems] ([SystemID]);


GO
PRINT N'Creating [Control].[GetSystemID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [Control].[GetSystemID]
(
	@SystemName VARCHAR(255)
)
RETURNS INT
WITH SCHEMABINDING
AS
BEGIN

	DECLARE @SystemID INT = (SELECT SystemID FROM [Control].[SourceSystems] WHERE SystemName = @SystemName);

	RETURN @SystemID

END
GO
PRINT N'Creating [Control].[GetRunDate]...';


GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [Control].[GetRunDate]
(
	@RunID INT
)
RETURNS DATE
WITH SCHEMABINDING
AS
BEGIN

	DECLARE @RunDate DATE = (SELECT BusinessDate FROM [Control].[Run] WHERE RunID = @RunID);

	RETURN @RunDate

END
GO
PRINT N'Creating [Control].[Initialise_DownloadQueue]...';


GO


-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- Usage: EXEC [Control].[Initialise_DownloadQueue] @RunID = 248
-- *********************************************
CREATE PROCEDURE [Control].[Initialise_DownloadQueue]
	@RunID INT = -1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.	

	DECLARE @RunDayOfWeek INT;

	SET NOCOUNT ON;
	
	INSERT INTO [Control].[DownloadQueue] (RunID, FileID)
	SELECT 
		A.RunID,
		B.FileID
	FROM [Control].[Run] as A
	CROSS APPLY (SELECT FileID FROM [Control].[Files] WHERE Frequency = 'D') as B
	WHERE B.FileID NOT IN (SELECT FileID FROM [Control].[DownloadQueue] WHERE RunID = A.RunID)
	AND A.RunID = ISNULL(NULLIF(@RunID, -1), A.RunID);

	SELECT @@ROWCOUNT;

	SET @RunDayOfWeek = (SELECT (DATEPART(dw, [Control].GetRunDate(@RunID)) + @@DATEFIRST) % 7)

	--SELECT @RunDayOfWeek;

	IF @RunDayOfWeek = 6
	BEGIN
		INSERT INTO [Control].[DownloadQueue] (RunID, FileID)
		SELECT 
			A.RunID,
			B.FileID
		FROM [Control].[Run] as A
		CROSS APPLY (SELECT FileID FROM [Control].[Files] WHERE Frequency = 'W') as B
		WHERE B.FileID NOT IN (SELECT FileID FROM [Control].[DownloadQueue] WHERE RunID = A.RunID)
		AND A.RunID = ISNULL(NULLIF(@RunID, -1), A.RunID)
	END
		
END
GO
PRINT N'Creating [Control].[Initialise_Run]...';


GO


-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- EXEC [Control].[Initialise_Run]
-- *********************************************
CREATE PROCEDURE [Control].[Initialise_Run]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	DECLARE @EOD_D DATE = (SELECT CASE (DATEPART(dw, MAX(BusinessDate)) + @@DATEFIRST) % 7
										WHEN 1 THEN DATEADD(day,1,MAX(BusinessDate)) --'Sunday'
										WHEN 2 THEN DATEADD(day,1,MAX(BusinessDate)) --'Monday'
										WHEN 3 THEN DATEADD(day,1,MAX(BusinessDate)) --'Tuesday'
										WHEN 4 THEN DATEADD(day,1,MAX(BusinessDate)) --'Wednesday'
										WHEN 5 THEN DATEADD(day,1,MAX(BusinessDate)) --'Thursday'
										WHEN 6 THEN DATEADD(day,3,MAX(BusinessDate)) --'Friday'
										WHEN 0 THEN DATEADD(day,2,MAX(BusinessDate)) --'Saturday'
									END FROM [Control].[Run]);
	DECLARE @DATE_COUNT INT;
	DECLARE @MAX_DATE DATE = GETDATE();

	WHILE @EOD_D < @MAX_DATE
	BEGIN

		SELECT @DATE_COUNT = COUNT(*) FROM [Control].[Run] WHERE BusinessDate = @EOD_D;

		IF @DATE_COUNT = 0 -- if date doesnt already exist in table
		BEGIN
			INSERT INTO [Control].[Run] (BusinessDate)
			SELECT @EOD_D;
		END

		SELECT @EOD_D = -- get next date
			CASE (DATEPART(dw, @EOD_D) + @@DATEFIRST) % 7
				WHEN 1 THEN DATEADD(day,1,@EOD_D) --'Sunday'
				WHEN 2 THEN DATEADD(day,1,@EOD_D) --'Monday'
				WHEN 3 THEN DATEADD(day,1,@EOD_D) --'Tuesday'
				WHEN 4 THEN DATEADD(day,1,@EOD_D) --'Wednesday'
				WHEN 5 THEN DATEADD(day,1,@EOD_D) --'Thursday'
				WHEN 6 THEN DATEADD(day,3,@EOD_D) --'Friday'
				WHEN 0 THEN DATEADD(day,2,@EOD_D) --'Saturday'
			END
	END

END
GO
PRINT N'Creating [Control].[Initialise_UploadQueue]...';


GO


-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- EXEC [Control].[Initialise_UploadQueue] @RunID = 1;
-- *********************************************
CREATE PROCEDURE [Control].[Initialise_UploadQueue]
	@RunID INT = -1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

	DECLARE @RunDayOfWeek INT;

	SET NOCOUNT ON;
	
	INSERT INTO [Control].[UploadQueue] (RunID, FileID)
	SELECT 
		A.RunID,
		B.FileID
	FROM [Control].[Run] as A
	CROSS APPLY (SELECT FileID FROM [Control].[Files] WHERE Frequency = 'D') as B
	WHERE B.FileID NOT IN (SELECT FileID FROM [Control].[UploadQueue] WHERE RunID = A.RunID)
	AND A.RunID = ISNULL(NULLIF(@RunID, -1), A.RunID);

	SELECT @@ROWCOUNT;
	
	SET @RunDayOfWeek = (SELECT (DATEPART(dw, [Control].GetRunDate(@RunID)) + @@DATEFIRST) % 7)

	--SELECT @RunDayOfWeek;

	IF @RunDayOfWeek = 6
	BEGIN
		INSERT INTO [Control].[UploadQueue] (RunID, FileID)
		SELECT 
			A.RunID,
			B.FileID
		FROM [Control].[Run] as A
		CROSS APPLY (SELECT FileID FROM [Control].[Files] WHERE Frequency = 'W') as B
		WHERE B.FileID NOT IN (SELECT FileID FROM [Control].[UploadQueue] WHERE RunID = A.RunID)
		AND A.RunID = ISNULL(NULLIF(@RunID, -1), A.RunID)
	END

END
GO
PRINT N'Creating [Control].[Set_UploadStatus]...';


GO

-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- *********************************************
CREATE PROCEDURE [Control].[Set_UploadStatus]
	@RunID INT,
	@FileID INT,
	@StatusCode INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	UPDATE [Control].[UploadQueue]
	SET StatusCode = @StatusCode,
		UploadDate = GETDATE()
	WHERE RunID = @RunID
	AND FileID = @FileID;

END
GO
PRINT N'Creating [Control].[Get_FileDownloadMetadata]...';


GO
-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Get a file to download from the queue
-- Test: EXEC [Control].[Get_FileDownloadMetadata] @SystemID = 1;
-- *********************************************
CREATE PROCEDURE [Control].[Get_FileDownloadMetadata]
	@SystemID INT,			  -- REQURIED
	@FileID INT = 0,		  -- OPTIONAL 
	@RunID INT = 0,			  -- OPTIONAL - If not supplied, the min will be found
	@Frequency CHAR(1) = 'D', -- OPTIONAL - Default to daily
	@Retry_Flag BIT = 0		  -- OPTIONAL - Default to no
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @BusinessDate DATE;

	CREATE TABLE #StatusCodes ( StatusCode INT );

	IF @Retry_Flag = 1
	BEGIN
		INSERT INTO #StatusCodes
		SELECT -1 UNION ALL
		SELECT 0
	END
	ELSE
	BEGIN
		INSERT INTO #StatusCodes
		SELECT 0
	END
	
	IF @RunID = 0 
	BEGIN
		SELECT @RunID = MIN(RunID) 
		FROM [Control].[DownloadQueue] as A
		LEFT JOIN [Control].[Files] as  B on A.FileID = B.FileID
		WHERE StatusCode IN (SELECT StatusCode FROM #StatusCodes)
		AND B.SystemID = @SystemID
	END

	--SELECT @RunID;

	SELECT @BusinessDate = BusinessDate FROM [Control].[Run] WHERE RunID = @RunID;

-- This code isnt generic, will only work for AFR files.
-- Change when addition systems are added
	
	SELECT
		A.FileID,
		REPLACE(B.SourceURI,'[YYYY-MM-DD]',CONVERT(char(10),DATEADD(d,B.DateOffset,@BusinessDate),126)) AS [SourceURI],
		REPLACE(B.FileName,'[YYMMDD]',CONVERT(char(6),DATEADD(d,B.DateOffset,@BusinessDate),12)) AS [FileName],
		B.TargetURI,
		A.RunID
	FROM [Control].[DownloadQueue] AS A
	INNER JOIN [Control].[Files] AS B on A.FileID = B.FileID
	WHERE A.StatusCode IN (SELECT StatusCode FROM #StatusCodes) -- Only files that are pending 
	AND A.RunID = @RunID
	AND B.SystemID = @SystemID
	AND A.FileID = ISNULL(NULLIF(@FileID,0),A.FileID)
	AND B.Frequency = @Frequency;


END
GO
PRINT N'Creating [Control].[Get_FileUploadMetadata]...';


GO
-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 07/04/2015
-- Description:	Get RunID and Filename for a FileID
-- Test: EXEC [Control].[Get_FileUploadMetadata] @FileID = 1;
-- *********************************************

CREATE PROCEDURE [Control].[Get_FileUploadMetadata]
	@FileID INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @BusinessDate DATE, @RunID INT;
	
	SELECT @RunID = MIN(RunID) FROM [Control].[UploadQueue] WHERE StatusCode = 0 AND FileID = @FileID;

	SELECT @BusinessDate = BusinessDate FROM [Control].[Run] WHERE RunID = @RunID;

-- This code isnt generic, will only work for AFR files.
-- Change when addition systems are added
	
	SELECT
		A.RunID,
		B.SystemID,
		B.TargetURI AS [Directory],
		REPLACE(B.FileName,'[YYMMDD]',CONVERT(char(6),DATEADD(d,B.DateOffset,@BusinessDate),12)) AS [Filename]
	FROM [Control].[UploadQueue] AS A
	INNER JOIN [Control].[Files] AS B on A.FileID = B.FileID
	WHERE A.StatusCode = 0 -- Only files that are pending 
	AND A.RunID = @RunID
	AND A.FileID = @FileID;

END
GO
PRINT N'Creating [Control].[Set_DownloadStatus]...';


GO

-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- *********************************************
CREATE PROCEDURE [Control].[Set_DownloadStatus]
	@RunID INT,
	@FileID INT,
	@StatusCode INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	UPDATE [Control].[DownloadQueue]
	SET StatusCode = @StatusCode,
		DownloadDate = GETDATE()
	WHERE RunID = @RunID
	AND FileID = @FileID;

END
GO
PRINT N'Creating [Control].[Initialise_Automation]...';


GO


-- *********************************************
-- Author:		Aaron Jackson
-- Create date: 05/04/2015
-- Description:	Update status
-- Test: EXEC [Control].[Initialise_Automation]
-- *********************************************
CREATE PROCEDURE [Control].[Initialise_Automation]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	-- Populate run with business date
	EXEC [Control].[Initialise_Run];
	-- Populate Download Queue
	EXEC [Control].[Initialise_DownloadQueue];
	-- Populate Upload Queue
	EXEC [Control].[Initialise_UploadQueue];

END
GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [trinity];


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
