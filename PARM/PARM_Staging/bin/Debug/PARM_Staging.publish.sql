/*
Deployment script for PARM_Staging

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PARM_Staging"
:setvar DefaultFilePrefix "PARM_Staging"
:setvar DefaultDataPath "F:\SQLData\"
:setvar DefaultLogPath "F:\SQLLog\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Latin1_General_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [Staging]...';


GO
CREATE SCHEMA [Staging]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Staging].[AFR_ASX300_Daily_Raw]...';


GO
CREATE TABLE [Staging].[AFR_ASX300_Daily_Raw] (
    [RunID]               INT           NOT NULL,
    [SystemID]            INT           NOT NULL,
    [FileID]              INT           NOT NULL,
    [RowID]               INT           IDENTITY (1, 1) NOT NULL,
    [52 Week High]        VARCHAR (50)  NULL,
    [52 Week Low]         VARCHAR (50)  NULL,
    [Day's High]          VARCHAR (50)  NULL,
    [Day's Low]           VARCHAR (50)  NULL,
    [ASX Code]            VARCHAR (50)  NULL,
    [Company Name]        VARCHAR (255) NULL,
    [Last Sale]           VARCHAR (50)  NULL,
    [+ or -]              VARCHAR (50)  NULL,
    [Vol 100's]           VARCHAR (50)  NULL,
    [Quote Buy]           VARCHAR (50)  NULL,
    [Quote Sell]          VARCHAR (50)  NULL,
    [Div c per share]     VARCHAR (50)  NULL,
    [Franked]             VARCHAR (50)  NULL,
    [Div Times cov'd]     VARCHAR (50)  NULL,
    [Net Tangible Assets] VARCHAR (50)  NULL,
    [Div yield %]         VARCHAR (50)  NULL,
    [Earn share c]        VARCHAR (50)  NULL,
    [P/E ratio]           VARCHAR (50)  NULL
);


GO
PRINT N'Creating [dbo].[CBA_Transactions]...';


GO
CREATE TABLE [dbo].[CBA_Transactions] (
    [Date]    DATE          NOT NULL,
    [Detail]  VARCHAR (255) NOT NULL,
    [Debit]   MONEY         NOT NULL,
    [Credit]  MONEY         NOT NULL,
    [Balance] MONEY         NOT NULL
);


GO
PRINT N'Creating [dbo].[CBA_TransactionSummary]...';


GO
CREATE TABLE [dbo].[CBA_TransactionSummary] (
    [Code]               VARCHAR (10)  NOT NULL,
    [Company]            VARCHAR (255) NOT NULL,
    [Date]               DATE          NOT NULL,
    [Type]               VARCHAR (4)   NOT NULL,
    [Quantity]           INT           NOT NULL,
    [UnitPrice]          MONEY         NOT NULL,
    [TradeValue]         MONEY         NOT NULL,
    [Brokerage_with_GST] MONEY         NOT NULL,
    [GST]                MONEY         NOT NULL,
    [ContractNote]       INT           NOT NULL,
    [TotalValue]         MONEY         NOT NULL
);


GO
PRINT N'Creating [dbo].[fn_StripCharacters]...';


GO
CREATE FUNCTION [dbo].[fn_StripCharacters]
(
    @String NVARCHAR(MAX), 
    @MatchExpression VARCHAR(255)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    SET @MatchExpression =  '%['+@MatchExpression+']%'

    WHILE PatIndex(@MatchExpression, @String) > 0
        SET @String = Stuff(@String, PatIndex(@MatchExpression, @String), 1, '')

    RETURN @String

END
GO
PRINT N'Creating [dbo].[GetHistoricCapitalPosition]...';


GO

-- =============================================
-- Author:		Aaron Jackson
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[GetHistoricCapitalPosition]
(
	@Date DATE
)
RETURNS TABLE 
RETURN (
	SELECT
			@Date as [Date]
			,COALESCE([Detail],'Total') as [Detail]
			,SUM([Amount]) AS [Amount]
	FROM (SELECT
			  [Detail]
			  ,-1 * [Debit] + [Credit] as [Amount]
		  FROM [dbo].[CBA_Transactions]
		  WHERE Detail IN ('Transaction Fee', 'Principal Reduction', 'Interest capitalised')
		  AND [Date] <= @Date) as qry
	GROUP BY
			[Detail]
	WITH ROLLUP
	)
GO
PRINT N'Creating [dbo].[GetHistoricPortfolioPosition]...';


GO

-- =============================================
-- Author:		Aaron Jackson
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[GetHistoricPortfolioPosition]
(
	@Date DATE
)
RETURNS TABLE 
RETURN (
	SELECT
			@Date as [Date]
			,COALESCE([Stock],'PORTFOLIO') as [Stock]
			,COALESCE([BuySellFlag],'TOTAL') as [BuySellFlag]
			,SUM(CASE WHEN [BuySellFlag] = 'SELL' THEN -1 ELSE 1 END *[Lots]) as [Lots]
			,SUM([Amount])/SUM([Lots]) as [AveragePrice]
			,SUM([Amount]) AS [Amount]
	FROM (SELECT
			  CASE
				WHEN LEFT(Detail,3) = 'BUY' THEN 'BUY'
				WHEN LEFT(Detail,4) = 'SELL' THEN 'SELL'
			   END as [BuySellFlag]
			  ,CAST(SUBSTRING(dbo.fn_StripCharacters(detail, '^0-9 '),0,6) as INT) as [Lots]
			  ,RIGHT(RTRIM(LTRIM(dbo.fn_StripCharacters(detail, '^ a-z'))),3) as [Stock]
			  ,SUBSTRING(Detail,CHARINDEX('$',Detail)+1,LEN(Detail)-CHARINDEX('$',Detail)+1) as [Price]
			  ,-1 * [Debit] + [Credit] as [Amount]
		  FROM [dbo].[CBA_Transactions]
		  WHERE Detail NOT IN ('Transaction Fee', 'Principal Reduction', 'Interest capitalised')
		  AND Date <= @Date) as qry
	GROUP BY
			[Stock]
			,[BuySellFlag]
	WITH ROLLUP
	)
GO
PRINT N'Creating [Staging].[AFR_ASX300_Daily]...';


GO
CREATE VIEW [Staging].[AFR_ASX300_Daily]
AS
SELECT
	   B.BusinessDate
	  ,A.[52 Week High]
      ,A.[52 Week Low]
      ,A.[Day's High]
      ,A.[Day's Low]
      ,A.[ASX Code]
      ,A.[Company Name]
      ,A.[Last Sale]
      ,A.[+ or -]
      ,A.[Vol 100's]
      ,A.[Quote Buy]
      ,A.[Quote Sell]
      ,A.[Div c per share]
      ,A.[Franked]
      ,A.[Div Times cov'd]
      ,A.[Net Tangible Assets]
      ,A.[Div yield %]
      ,A.[Earn share c]
      ,REPLACE(A.[P/E ratio],',,','') as [P/E ratio]
FROM [Staging].[AFR_ASX300_Daily_Raw] AS A
INNER JOIN [PARM_Control].[Control].Run AS B on A.RunID = B.RunID
GO
PRINT N'Creating [dbo].[CapitalPosition]...';


GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [dbo].[CapitalPosition]
AS

	WITH CleanData AS
	(
		SELECT --[Date]
			  [Detail]
			  ,-1 * [Debit] + [Credit] as [Amount]
		  FROM [dbo].[CBA_Transactions]
		  WHERE Detail IN ('Transaction Fee', 'Principal Reduction', 'Interest capitalised')
	)

	SELECT
			COALESCE([Detail],'Total') as [Detail]
			,SUM([Amount]) AS [Amount]
	FROM CleanData
	GROUP BY
			[Detail]
	WITH ROLLUP
GO
PRINT N'Creating [dbo].[TotalPosition]...';


GO

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [dbo].[TotalPosition]
AS

	WITH CleanData AS
	(
		SELECT [Date]
			  --,[Detail]
			  ,CASE
				WHEN LEFT(Detail,3) = 'BUY' THEN 'BUY'
				WHEN LEFT(Detail,4) = 'SELL' THEN 'SELL'
			   END as [BuySellFlag]
			  ,CAST(SUBSTRING(dbo.fn_StripCharacters(detail, '^0-9 '),0,6) as INT) as [Lots]
			  ,RIGHT(RTRIM(LTRIM(dbo.fn_StripCharacters(detail, '^ a-z'))),3) as [Stock]
			  ,SUBSTRING(Detail,CHARINDEX('$',Detail)+1,LEN(Detail)-CHARINDEX('$',Detail)+1) as [Price]
			  ,-1 * [Debit] + [Credit] as [Amount]
		  FROM [dbo].[CBA_Transactions]
		  WHERE Detail NOT IN ('Transaction Fee', 'Principal Reduction', 'Interest capitalised')
	)

	SELECT   --[Date]
			COALESCE([Stock],'PORTFOLIO') as [Stock]
			,COALESCE([BuySellFlag],'TOTAL') as [BuySellFlag]
			,SUM(CASE WHEN [BuySellFlag] = 'SELL' THEN -1 ELSE 1 END *[Lots]) as [Lots]
			,SUM([Amount])/SUM([Lots]) as [AveragePrice]
			,SUM([Amount]) AS [Amount]
	FROM CleanData
	GROUP BY
			[Stock]
			,[BuySellFlag]
	WITH ROLLUP

	
  -- add two principal reductions at the start

  -- add scalar functions to extract data?

  -- stock is a type 2 SCD. Need to incorporate this logic.

  -- Market Star
  -- Portfolio Star
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
